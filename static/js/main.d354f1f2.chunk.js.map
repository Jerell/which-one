{"version":3,"sources":["components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","Box","display","justifyContent","mb","TextField","label","word","onChange","e","text","target","value","setWord","Canvas","ctx","t","x","y","color","fillStyle","font","fillText","toUpperCase","useEffect","cref","current","getContext","canvas","width","height","r","w","h","fillRect","rect","tlop","Image","addEventListener","drawImage","splitSentence","split","firstPart","slice","length","join","lastWord","src","ref","App","useState","which","setWhich","xywh","canvasRef","useRef","uploadRef","className","type","id","name","reader","FileReader","onload","event","img","result","readAsDataURL","files","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAGe,SAASA,EAAOC,GAK7B,OACE,iCACE,cAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,eAAe,SAASC,GAAI,EAAhD,SACE,cAACC,EAAA,EAAD,CAAWC,MAAON,EAAMO,KAAMC,SAPpC,SAAsBC,GACpB,IAAIC,EAAOD,EAAEE,OAAOC,MACpBZ,EAAMa,QAAQH,UCDlB,IAAMI,EAAS,SAACd,GACd,IAKMU,EAAO,SAACK,EAAKC,EAAGC,EAAGC,GAA0B,IAAvBC,EAAsB,uDAAd,UAClCJ,EAAIK,UAAYD,EAChBJ,EAAIM,KAAO,kBACXN,EAAIO,SAASN,EAAEO,cAAeN,EAAGC,IA2DnC,OAxDAM,qBAAU,WACR,IACMT,EADSf,EAAMyB,KAAKC,QACPC,WAAW,MAE9BZ,EAAIa,OAAOC,MAAQ,IACnBd,EAAIa,OAAOE,OAAS,IAEpB,IAAIC,EAlBO,SAAChB,GAAD,OAAS,SAACE,EAAGC,EAAGc,EAAGC,GAA0B,IAAvBd,EAAsB,uDAAd,UAEzC,OADAJ,EAAIK,UAAYD,EACTJ,EAAImB,SAASjB,EAAGC,EAAGc,EAAGC,IAgBrBE,CAAKpB,GACTqB,EAAO,IAAIC,MACfD,EAAKE,iBACH,QACA,WACEvB,EAAIwB,UAAUH,EAAM,EAAG,GAEvB,IAAII,EAAgBxC,EAAMO,KAAKkC,MAAM,KACjCC,EAAYF,EACbG,MAAM,EAAGH,EAAcI,OAAS,GAChCC,KAAK,KACJC,EAAWN,EAAcA,EAAcI,OAAS,GAEpDb,EAAE,IAAK,GAAI,IAAK,GAAI,WACpBrB,EAAKK,EAAK2B,EAAW,IAAK,IAC1BhC,EAAKK,EAAK+B,EAAU,IAAK,IAEzBf,EAAE,IAAK,GAAI,IAAK,GAAI,WACpBrB,EAAKK,EAAK2B,EAAW,IAAK,KAC1BhC,EAAKK,EAAK+B,EAAU,IAAK,KAEzBf,EAAE,IAAK,IAAK,IAAK,GAAI,WACrBrB,EAAKK,EAAK2B,EAAW,IAAK,KAC1BhC,EAAKK,EAAK+B,EAAU,IAAK,KAEzBf,EAAE,IAAK,IAAK,IAAK,GAAI,WACrBrB,EAAKK,EAAK2B,EAAW,IAAK,KAC1BhC,EAAKK,EAAK+B,EAAU,IAAK,KAEzBf,EAAE,IAAK,IAAK,IAAK,GAAI,WACrBrB,EAAKK,EAAK2B,EAAW,IAAK,KAC1BhC,EAAKK,EAAK+B,EAAU,IAAK,KAEzBf,EAAE,IAAK,IAAK,IAAK,GAAI,WACrBrB,EAAKK,EAAK2B,EAAW,IAAK,KAC1BhC,EAAKK,EAAK+B,EAAU,IAAK,KAEzBf,EAAE,IAAK,IAAK,IAAK,GAAI,WACrBrB,EAAKK,EAAK2B,EAAW,IAAK,KAC1BhC,EAAKK,EAAK+B,EAAU,IAAK,KAEzBf,EAAE,IAAK,IAAK,IAAK,KACjBA,EAAE,IAAK,IAAK,IAAK,QAEnB,GAEFK,EAAKW,IAAM,aACV,CAAC/C,EAAMO,KAAMP,EAAMyB,OAEf,oCAAQuB,IAAKhD,EAAMyB,MAAUzB,KAkDvBiD,MA/Cf,WAAgB,IAAD,EACWC,mBAAS,eADpB,mBACN3C,EADM,KACAM,EADA,OAEaqC,mBAAS,GAFtB,mBAENC,EAFM,KAECC,EAFD,KAIPC,EAAO,CACX,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,MAqBZC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MACzB,OACE,sBAAKE,UAAU,MAAf,UACE,cAAC1D,EAAD,CAAQQ,KAAMA,EAAMM,QAASA,IAC7B,iCACE,uBACE6C,KAAK,OACLV,IAAKQ,EACLG,GAAG,cACHC,KAAK,cACLpD,SA7BR,SAAsBC,GACpB,IACMM,EADSuC,EAAU5B,QACNC,WAAW,MAE1BkC,EAAS,IAAIC,WAEjBD,EAAOE,OAAS,SAAUC,GACxB,IAAIC,EAAM,IAAI5B,MACd4B,EAAIF,OAAS,WACXhD,EAAIwB,UAAJ,MAAAxB,EAAG,CAAWkD,GAAX,mBAAmBZ,IAAOF,OAE/Bc,EAAIlB,IAAMiB,EAAMrD,OAAOuD,QAEzBL,EAAOM,cAAc1D,EAAEE,OAAOyD,MAAM,IAEpChB,GAAUD,MAiBN,cAAC,EAAD,CAAQ1B,KAAM6B,EAAW/C,KAAMA,WCzGxB8D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d354f1f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { TextField, Box } from \"@material-ui/core\";\r\n\r\nexport default function Header(props) {\r\n  function handleChange(e) {\r\n    let text = e.target.value;\r\n    props.setWord(text);\r\n  }\r\n  return (\r\n    <header>\r\n      <Box display=\"flex\" justifyContent=\"center\" mb={2}>\r\n        <TextField label={props.word} onChange={handleChange}></TextField>\r\n      </Box>\r\n    </header>\r\n  );\r\n}\r\n","import \"./App.css\";\n\nimport { useRef, useEffect, useState } from \"react\";\nimport Header from \"./components/Header\";\n\nconst Canvas = (props) => {\n  const rect = (ctx) => (x, y, w, h, color = \"#000000\") => {\n    ctx.fillStyle = color;\n    return ctx.fillRect(x, y, w, h);\n  };\n\n  const text = (ctx, t, x, y, color = \"#000000\") => {\n    ctx.fillStyle = color;\n    ctx.font = \"bold 53px Arial\";\n    ctx.fillText(t.toUpperCase(), x, y);\n  };\n\n  useEffect(() => {\n    const canvas = props.cref.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.canvas.width = 820;\n    ctx.canvas.height = 820;\n\n    let r = rect(ctx);\n    var tlop = new Image(); // Create new img element\n    tlop.addEventListener(\n      \"load\",\n      function () {\n        ctx.drawImage(tlop, 0, 0);\n\n        let splitSentence = props.word.split(\" \");\n        let firstPart = splitSentence\n          .slice(0, splitSentence.length - 1)\n          .join(\" \");\n        let lastWord = splitSentence[splitSentence.length - 1];\n\n        r(120, 30, 625, 55, \"#f58b57\");\n        text(ctx, firstPart, 119, 77);\n        text(ctx, lastWord, 559, 77);\n\n        r(120, 94, 565, 55, \"#f58b57\");\n        text(ctx, firstPart, 119, 140);\n        text(ctx, lastWord, 501, 140);\n\n        r(120, 158, 565, 55, \"#f58b57\");\n        text(ctx, firstPart, 119, 204);\n        text(ctx, lastWord, 501, 204);\n\n        r(120, 222, 565, 55, \"#f58b57\");\n        text(ctx, firstPart, 119, 268);\n        text(ctx, lastWord, 501, 268);\n\n        r(120, 282, 565, 55, \"#f58b57\");\n        text(ctx, firstPart, 119, 330);\n        text(ctx, lastWord, 501, 330);\n\n        r(120, 344, 565, 55, \"#f58b57\");\n        text(ctx, firstPart, 119, 392);\n        text(ctx, lastWord, 501, 392);\n\n        r(120, 469, 592, 55, \"#f58b57\");\n        text(ctx, firstPart, 119, 517);\n        text(ctx, lastWord, 530, 517);\n\n        r(168, 246, 327, 228);\n        r(362, 570, 225, 193);\n      },\n      false\n    );\n    tlop.src = \"tlop.jpg\"; // Set source path\n  }, [props.word, props.cref]);\n\n  return <canvas ref={props.cref} {...props} />;\n};\n\nfunction App() {\n  const [word, setWord] = useState(\"THE LIFE OF\");\n  const [which, setWhich] = useState(0);\n\n  const xywh = [\n    [168, 246, 327, 228],\n    [362, 570, 225, 193],\n  ];\n\n  function receiveImage(e) {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      var img = new Image();\n      img.onload = function () {\n        ctx.drawImage(img, ...xywh[~~which]);\n      };\n      img.src = event.target.result;\n    };\n    reader.readAsDataURL(e.target.files[0]);\n\n    setWhich(!which);\n  }\n\n  const canvasRef = useRef(null);\n  const uploadRef = useRef(null);\n  return (\n    <div className=\"App\">\n      <Header word={word} setWord={setWord}></Header>\n      <main>\n        <input\n          type=\"file\"\n          ref={uploadRef}\n          id=\"imageLoader\"\n          name=\"imageLoader\"\n          onChange={receiveImage}\n          // onInput={receiveImage}\n        />\n        <Canvas cref={canvasRef} word={word}></Canvas>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}